---
import BaseLayout from "@/layouts/BaseLayout";
import Tag from "@/components/Tag";
import { Image } from "astro:assets";
import type { GetPostResponse } from "@/types/responses";

type Props = {
	postData: GetPostResponse;
};

const { postData } = Astro.props;
const createdAt = new Date(postData.created_at);
const updatedAt = postData.updated_at ? new Date(postData.updated_at) : null;
const articleDate = createdAt.toISOString();
const currentDate = new Date();
const isPostExpired = (deadline: string) => {
	if (!deadline) return false;
	const dateParts = deadline.split("/");
	const expiredDate = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);
	return expiredDate <= currentDate;
};
const shouldShowExpiredTag = isPostExpired(
	postData.other_information?.deadline,
);
---

<BaseLayout
	title={postData.title}
	description={postData.description}
	image={postData.banner_img}
	keywords={postData.keywords}
	articleDate={articleDate}
	createdAt={createdAt}
	updatedAt={updatedAt}
>
	<article class='min-w-full md:py-4 sm:max-w-none md:max-w-none'>
		<header class='mb-3 flex flex-col justify-center items-center gap-6'>
			<div class='flex flex-col gap-2'>
				<div class='flex items-center justify-center gap-x-1'>
					<!-- TODO -->
					<!-- <p class='text-center text-sm text-opacity-50 font-bold'>
						- {readTime}
					</p> -->
				</div>
				<h1 class='title text-center text-4xl md:text-6xl md:pb-2.5 font-semibold'>
					{postData.title}
				</h1>
			</div>

			<div class='flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5'>
				{postData.tags.map((tag) => <Tag tag={tag} />)}
			</div>

			<span
				class='bg-red-600 font-semibold text-white dark:bg-red-900 dark:text-white shadow text-sm w-fit px-2 py-1 md:px-5 md:py-2 rounded-full'
			>
				Deadline: {postData.other_information?.deadline ?? 'ASAP'}
			</span>
		</header>

		<div class='relative'>
			{
				postData.banner_img && (
					<Image
						src={postData.banner_img}
						width={1000}
						height={500}
						quality={100}
						format='jpg'
						loading='eager'
						class='rounded-md w-full max-h-[500px]  md:max-h-[800px] my-8 object-cover'
						alt={`img of ${postData.title}`}
					/>
				)
			}
			{
				shouldShowExpiredTag && (
					<Image
						src='/expired-news-tag.png'
						width={150}
						height={150}
						format='png'
						class='z-30 absolute top-0 right-0'
						alt="Expired tag"
					/>
				)
			}
		<div/>

		<hr />

		<div>
			<slot />
		</div>
	</article>
</BaseLayout>

<script>
	import { animate } from 'motion'

	animate(
		'.title',
		{
			opacity: [0, 1],
			clipPath: ['circle(0% at 0% 0%)', 'circle(100% at 50% 50%)']
		},
		{ duration: 2, easing: 'ease' }
	)

	const fnObserver = () => {
		function handleIntersection(
			entries: IntersectionObserverEntry[],
			observer: IntersectionObserver
		) {
			entries.forEach((entry) => {
				const index = document.querySelector(`aside a[href="#${entry.target.id}"]`)

				if (entry.isIntersecting) {
					index?.classList.remove('bg-slate-200', 'dark:bg-slate-800') // remove bg
					index?.classList.add(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				} else {
					index?.classList.add('bg-slate-200', 'dark:bg-slate-800') // add bg
					index?.classList.remove(
						'bg-indigo-600',
						'dark:bg-indigo-700',
						'text-white',
						'font-bold',
						'transition-colors',
						'duration-200'
					)
				}
			})
		}

		const headings = document.querySelectorAll(
			'div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6'
		)

		const options = {
			root: null,
			rootMargin: ' 15% 0px 0% 0px ',
			threshold: 1
		}

		const observer = new IntersectionObserver(handleIntersection, options)

		headings.forEach((heading) => {
			observer.observe(heading)
		})
	}
	fnObserver()
	document.addEventListener('astro:after-swap', fnObserver)
</script>
